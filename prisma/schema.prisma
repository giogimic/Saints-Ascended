// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  // For production, you might want to use PostgreSQL instead:
  // provider = "postgresql"
  // url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Mod {
  id                Int      @id
  gameId            Int
  name              String
  slug              String
  summary           String?
  status            Int
  downloadCount     Int      @default(0)
  isFeatured        Boolean  @default(false)
  primaryCategoryId Int
  classId           Int
  dateCreated       DateTime
  dateModified      DateTime
  dateReleased      DateTime?
  allowModDistribution Boolean @default(true)
  gamePopularityRank Int?
  isAvailable       Boolean  @default(true)
  thumbsUpCount     Int      @default(0)
  
  // Enhanced fields for better search and filtering
  searchKeywords    String?  // Normalized keywords for search
  popularityScore   Float    @default(0) // Calculated popularity score
  lastUpdated       DateTime @default(now()) // When mod data was last updated
  updateFrequency   Int      @default(24) // Hours between updates
  
  // Relations
  links             ModLinks?
  categories        ModCategory[]
  authors           ModAuthor[]
  logo              ModLogo?
  screenshots       ModScreenshot[]
  latestFiles       ModFile[]
  latestFilesIndexes ModFileIndex[]
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastFetched       DateTime @default(now())
  
  @@map("mods")
  @@index([name])
  @@index([downloadCount])
  @@index([popularityScore])
  @@index([lastUpdated])
  @@index([searchKeywords])
}

model ModLinks {
  id          Int      @id @default(autoincrement())
  modId       Int      @unique
  websiteUrl  String?
  wikiUrl     String?
  issuesUrl   String?
  sourceUrl   String?
  
  mod         Mod      @relation(fields: [modId], references: [id], onDelete: Cascade)
  
  @@map("mod_links")
}

model ModCategory {
  id                 Int      @id @default(autoincrement())
  modId              Int
  categoryId         Int
  gameId             Int
  name               String
  slug               String
  url                String?
  iconUrl            String?
  dateModified       DateTime
  isClass            Boolean  @default(false)
  classId            Int?
  parentCategoryId   Int?
  displayIndex       Int?
  
  mod                Mod      @relation(fields: [modId], references: [id], onDelete: Cascade)
  
  @@map("mod_categories")
  @@index([categoryId])
  @@index([name])
  @@index([modId, categoryId])
}

model ModAuthor {
  id     Int      @id @default(autoincrement())
  modId  Int
  authorId Int
  name   String
  url    String?
  
  mod    Mod      @relation(fields: [modId], references: [id], onDelete: Cascade)
  
  @@map("mod_authors")
  @@index([authorId])
  @@index([name])
}

model ModLogo {
  id          Int      @id @default(autoincrement())
  modId       Int      @unique
  logoId      Int
  title       String?
  description String?
  thumbnailUrl String?
  url         String?
  
  mod         Mod      @relation(fields: [modId], references: [id], onDelete: Cascade)
  
  @@map("mod_logos")
}

model ModScreenshot {
  id          Int      @id @default(autoincrement())
  modId       Int
  screenshotId Int
  title       String?
  description String?
  thumbnailUrl String?
  url         String?
  
  mod         Mod      @relation(fields: [modId], references: [id], onDelete: Cascade)
  
  @@map("mod_screenshots")
}

model ModFile {
  id                    Int      @id @default(autoincrement())
  modId                 Int
  fileId                Int
  gameId                Int
  isAvailable           Boolean  @default(true)
  displayName           String
  fileName              String
  releaseType           Int
  fileStatus            Int
  fileDate              DateTime
  fileLength            BigInt
  downloadCount         Int      @default(0)
  fileSizeOnDisk        BigInt?
  downloadUrl           String?
  isServerPack          Boolean  @default(false)
  serverPackFileId      Int?
  isEarlyAccessContent  Boolean  @default(false)
  earlyAccessEndDate    DateTime?
  fileFingerprint       BigInt?
  
  // Relations
  hashes                ModFileHash[]
  gameVersions          ModFileGameVersion[]
  sortableGameVersions  ModFileSortableGameVersion[]
  dependencies          ModFileDependency[]
  modules               ModFileModule[]
  
  mod                   Mod      @relation(fields: [modId], references: [id], onDelete: Cascade)
  
  @@map("mod_files")
  @@index([fileId])
  @@index([releaseType])
  @@index([fileDate])
  @@index([downloadCount])
}

model ModFileHash {
  id       Int      @id @default(autoincrement())
  fileId   Int
  value    String
  algo     Int
  
  file     ModFile  @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@map("mod_file_hashes")
  @@index([value])
  @@index([algo])
}

model ModFileGameVersion {
  id       Int      @id @default(autoincrement())
  fileId   Int
  version  String
  
  file     ModFile  @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@map("mod_file_game_versions")
  @@index([version])
}

model ModFileSortableGameVersion {
  id                    Int      @id @default(autoincrement())
  fileId                Int
  gameVersionName       String
  gameVersionPadded     String
  gameVersion           String
  gameVersionReleaseDate DateTime
  gameVersionTypeId     Int
  modLoader             Int?
  
  file                  ModFile  @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@map("mod_file_sortable_game_versions")
  @@index([gameVersion])
  @@index([gameVersionTypeId])
}

model ModFileDependency {
  id           Int      @id @default(autoincrement())
  fileId       Int
  modId        Int
  relationType Int
  
  file         ModFile  @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@map("mod_file_dependencies")
  @@index([modId])
  @@index([relationType])
}

model ModFileModule {
  id          Int      @id @default(autoincrement())
  fileId      Int
  name        String
  fingerprint BigInt
  
  file        ModFile  @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@map("mod_file_modules")
  @@index([name])
}

model ModFileIndex {
  id                Int      @id @default(autoincrement())
  modId             Int
  gameVersion       String
  fileId            Int
  filename          String
  releaseType       Int
  gameVersionTypeId Int
  modLoader         Int?
  
  mod               Mod      @relation(fields: [modId], references: [id], onDelete: Cascade)
  
  @@map("mod_file_indexes")
  @@index([gameVersion])
  @@index([releaseType])
  @@index([gameVersionTypeId])
}

// Enhanced cache model with better indexing and metadata
model ModCache {
  id          Int      @id @default(autoincrement())
  query       String   @unique
  results     String   // JSON array of mod IDs
  totalCount  Int      @default(0)
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  hitCount    Int      @default(0) // Track cache usage
  lastAccessed DateTime @default(now())
  
  @@map("mod_cache")
  @@index([expiresAt])
  @@index([lastAccessed])
  @@index([hitCount])
}

// Enhanced installed mods model with better tracking
model InstalledMod {
  id              Int      @id @default(autoincrement())
  serverId        String
  modId           String
  name            String
  description     String?
  version         String?
  workshopId      String?
  enabled         Boolean  @default(true)
  loadOrder       Int      @default(0)
  dependencies    String?  // JSON array
  incompatibilities String? // JSON array
  size            String?
  lastUpdated     DateTime @default(now())
  
  // Enhanced CurseForge data
  curseForgeData  String?  // JSON object with full CurseForge data
  downloadCount   Int      @default(0)
  thumbsUpCount   Int      @default(0)
  logoUrl         String?
  author          String?
  category        String?
  tags            String?  // JSON array
  websiteUrl      String?
  fileSize        BigInt?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("installed_mods")
  @@unique([serverId, modId])
  @@index([serverId])
  @@index([modId])
  @@index([enabled])
  @@index([loadOrder])
  @@index([name])
}

// New model for tracking search analytics and popular mods
model ModSearchAnalytics {
  id              Int      @id @default(autoincrement())
  searchTerm      String
  category        String?
  resultCount     Int      @default(0)
  searchCount     Int      @default(1) // How many times this search was performed
  lastSearched    DateTime @default(now())
  avgResultCount  Float    @default(0) // Average results for this search
  
  @@map("mod_search_analytics")
  @@unique([searchTerm, category])
  @@index([searchTerm])
  @@index([category])
  @@index([searchCount])
  @@index([lastSearched])
}

// New model for tracking popular mods by category
model PopularMods {
  id              Int      @id @default(autoincrement())
  category        String
  modId           Int
  name            String
  downloadCount   Int      @default(0)
  thumbsUpCount   Int      @default(0)
  popularityScore Float    @default(0)
  rank            Int      @default(0)
  lastUpdated     DateTime @default(now())
  
  @@map("popular_mods")
  @@unique([category, modId])
  @@index([category])
  @@index([modId])
  @@index([popularityScore])
  @@index([rank])
}
