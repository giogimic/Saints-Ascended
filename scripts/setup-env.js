#!/usr/bin/env node

/**
 * Environment Setup Helper
 * Guides users through setting up required environment variables
 */

import fs from 'fs';
import path from 'path';
import { getEffectiveCurseForgeApiKey } from '../lib/global-settings-wrapper.js';

console.log('üîß Saints-Ascended Environment Setup Helper\n');

// Check current environment
console.log('üìã Current Environment Status:');
console.log('================================');

// Database URL
const dbUrl = process.env.DATABASE_URL;
if (dbUrl) {
  console.log(`‚úÖ DATABASE_URL: ${dbUrl}`);
} else {
  console.log('‚ùå DATABASE_URL: Not set');
  console.log('   üí° Recommended: file:./prisma/prisma/dev.db');
}

// CurseForge API Key
const apiKey = getEffectiveCurseForgeApiKey();
if (apiKey) {
  const isValidFormat = /^\$2[aby]?\$\d{2}\$[./A-Za-z0-9]{53}$/.test(apiKey);
  console.log(`‚úÖ CURSEFORGE_API_KEY: Set (${apiKey.length} characters)`);
  console.log(`${isValidFormat ? '‚úÖ' : '‚ùå'} Format: ${isValidFormat ? 'Valid BCrypt' : 'Invalid - should be BCrypt hash'}`);
} else {
  console.log('‚ùå CURSEFORGE_API_KEY: Not set');
  console.log('   üí° Required: Get from https://console.curseforge.com/');
}

console.log('\nüìñ Setup Instructions:');
console.log('======================');

if (!dbUrl) {
  console.log('\n1Ô∏è‚É£ Set Database URL (PowerShell):');
  console.log('   $env:DATABASE_URL="file:./prisma/prisma/dev.db"');
}

if (!apiKey) {
  console.log('\n2Ô∏è‚É£ Set CurseForge API Key in Global Settings:');
  console.log('   ‚Ä¢ Open the app in your browser');
  console.log('   ‚Ä¢ Go to Global Settings (gear icon)');
  console.log('   ‚Ä¢ Enter your CurseForge API key');
  console.log('   ‚Ä¢ Save the settings');
  console.log('\n   üìã To get an API key:');
  console.log('   ‚Ä¢ Visit: https://console.curseforge.com/');
  console.log('   ‚Ä¢ Create account or log in');
  console.log('   ‚Ä¢ Navigate to API Keys section');
  console.log('   ‚Ä¢ Create a new API key for your application');
  console.log('   ‚Ä¢ Copy the BCrypt hash (starts with $2a$10$...)');
}

console.log('\n3Ô∏è‚É£ Verify Setup:');
console.log('   node scripts/setup-env.js');

console.log('\n4Ô∏è‚É£ Test API Connection:');
console.log('   node scripts/verify-api-key.js');

console.log('\n5Ô∏è‚É£ Check Database Population:');
console.log('   node scripts/check-database.js');

if (dbUrl && apiKey) {
  console.log('\nüéâ Environment appears to be configured correctly!');
  console.log('   Run the verification scripts above to test functionality.');
} else {
  console.log('\n‚ö†Ô∏è  Environment setup incomplete. Please follow the instructions above.');
}

console.log('\nüìö Additional Help:');
console.log('==================');
console.log('‚Ä¢ Documentation: README.md');
console.log('‚Ä¢ Setup Guide: SETUP.md');
console.log('‚Ä¢ Deployment: DEPLOYMENT.md');
console.log('‚Ä¢ Troubleshooting: lets-fix-mod-loading-v2.md');

// Set DATABASE_URL environment variable
process.env.DATABASE_URL = 'file:./prisma/data/mods.db';

// Create database directory if it doesn't exist
const dbDir = path.join(process.cwd(), 'prisma', 'data');
if (!fs.existsSync(dbDir)) {
  fs.mkdirSync(dbDir, { recursive: true });
  console.log('üìÅ Created database directory');
}

console.log('‚úÖ Environment setup complete!');
console.log('   DATABASE_URL set to: file:./prisma/data/mods.db');
console.log('   Database directory: prisma/data/');
console.log('   API Key: Use Global Settings interface'); 